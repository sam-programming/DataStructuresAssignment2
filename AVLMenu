#Menu Program for AVL Tree testing
import AVLTree as avl
import random as ran

def menu():
    usr_choice = 0
    print("------ AVLTree Testing ------\n")
    while usr_choice != 3:
        tree = avl.AVLTree()
        print("Select the menu item to navigate the menu.")
        print("1) Pre-load a sequence of random integers to build an AVL Tree.")
        print("2) Manually Create an AVL Tree starting from the Root Node.")
        print("3) Exit.")
        usr_choice = Get_User_Choice(3)
        if usr_choice == 1:
            arr = Generate_Set(8)
            print("Values to be placed in AVL Tree:\n", arr)            
            for val in arr:
                tree.insert(val)
            print("\nAVL Tree")
            tree.display()
        elif usr_choice == 2:
            print("\n")            
        while usr_choice != 6:
            print("\nSelect the menu item to manipulate or view the AVL Tree.")
            Tree_Menu()
            usr_choice = Get_User_Choice(6)
            #1) Insert key into avl tree
            if usr_choice == 1:
                val = Get_User_Int()
                tree.insert(val)
                tree.display()
            elif usr_choice == 2:
                if tree.height != -1:
                    tree.display()
                    print("Delete a value in the AVL Tree.")
                    val = Get_User_Int()
                    tree.delete(val)
                else:
                    print("Tree is empty.")
            elif usr_choice == 3:
                print("Inorder Traversal:")
                traversal = tree.inorder_traverse()
                print(traversal)
            elif usr_choice == 4:
                if tree.height != -1:
                    leafs = tree.find_leafs()
                    parents = tree.find_parents()
                    
                    print("Leaf nodes for AVL Tree:")
                    print(leafs)                    
                    print("Non-Leaf nodes for AVL Tree:")
                    print(parents)
                else:
                    print("AVL Tree is empty.")
            
            elif usr_choice == 5:
                print("\n")
                tree.display()
                print("\n")
            elif usr_choice == 6:
                break
                    
                
                    
                
                    
          


#input validation method
def Get_User_Choice(max_opts):
    is_int = False
    while is_int == False:
        try:
            user_choice = int(input(""))
            if user_choice > max_opts:                
                print("Please enter a valid menu item.")
            else:
                is_int = True
        except:
            print("Please enter a valid menu item.")
    return user_choice

#input validation for tree insertion
def Get_User_Int():
    
    is_int = False
    while is_int == False:
        print("Please enter an integer.")
        try:
            user_choice = int(input(""))
            is_int = True
        except:
            print("Incorrect Entry.")
    return user_choice


#generate a set (unique vals) of random numbers
def Generate_Set(n):
    arr = []
    valid = False
    for count in range(n):
        num = ran.randint(1, n*5 + 1)
        #if the num generated is in the array, generate another
        while num in arr:
            num = ran.randint(1, n*5 + 1)
        arr.append(num)
    return arr

#control the menu choices depending on if the Tree has any nodes
def Tree_Menu():
    items = [
        "1) Insert a new integer key into the AVL Tree.",
        "2) Delete an integer key from the AVL Tree.",
        "3) Print the in-order traversal sequence of the AVL Tree.",
        "4) Print all leaf nodes and non-leaf nodes of the AVL Tree seperately.",
        "5) Display the AVL tree, showing the height and balance factor.",
        "6) Exit."
        ]
    for item in items:
        print(item)

def main():
    menu()

main()
