#Menu Program for AVL Tree testing
import AVLTree as avl
import random as ran

def menu():
    usr_choice = 0
    print("------------------------------")
    print("------ AVL Tree Testing ------")
    print("------------------------------")
    while usr_choice != 3:
        menu_choice = 0
        #create new tree object
        tree = avl.AVLTree()
        #initial menu to decide how to construct tree
        print("\nSelect the menu item to navigate the menu.")
        print("1) Pre-load a sequence of integers to build an AVL Tree.")
        print("2) Manually Create an AVL Tree starting from the Root Node.")
        print("3) Exit.")
        #input validate user menu choice
        usr_choice = Get_User_Choice(3)
        if usr_choice == 1: #pre-load values
            #test values from assignment brief
            arr = [55, 81, 65, 20, 35, 79, 23, 14, 21, 103, 92, 45, 85, 51, 47, 48, 50, 416]
            print("Values to be placed in AVL Tree:\n", arr)            
            for val in arr:
                tree.insert(val)
            print("\nAVL Tree (", tree.count_nodes(), " nodes)", sep='')
            #display the tree
            tree.display()
        elif usr_choice == 2:
            arr = Get_Manual_Input()
            if len(arr) != 0:
                for val in arr:
                    tree.insert(val)
                print("AVL Tree (", tree.count_nodes(), " nodes)", sep='')
                tree.display()
        while menu_choice != 6 and usr_choice != 3:
            #second menu with tree manipulation and traversal
            print("\nSelect the menu item to manipulate or view the AVL Tree.")
            Tree_Menu()
            #input for the second menu choice
            menu_choice = Get_User_Choice(6)
            #1) Insert key into avl tree
            if menu_choice == 1:
                val = Get_User_Int()
                #make sure value is not already in the tree
                #this is just a presentation measure so the tree is not displayed too often
                keys = tree.inorder_traverse()
                if val not in keys:
                    tree.insert(val)
                    print("AVL Tree (", tree.count_nodes(), " nodes)", sep='')
                    tree.display()
                else:
                    print(val, "is already present in the current AVL Tree.")
            #2) Delete key
            elif menu_choice == 2:
                #if tree is not empty
                if tree.height != -1:
                    print("AVL Tree (", tree.count_nodes(), " nodes)", sep='')
                    tree.display()
                    print("Delete a value in the AVL Tree.")
                    val = Get_User_Int()
                    #make sure value is in the tree
                    keys = tree.inorder_traverse()
                    if val in keys:
                        tree.delete(val)
                        tree.rebalance()
                        if tree.height != -1:
                            print("AVL Tree (", tree.count_nodes(), " nodes)", sep='')
                            tree.display()                            
                    else:
                        print("AVL Tree does not contain value", val)
                else:
                    print("Tree is empty.")
            #3) Inorder traversal of the tree
            elif menu_choice == 3:
                print("Inorder Traversal:")
                #uses the AVL Tree class method inorder_traverse()
                traversal = tree.inorder_traverse()
                print(traversal)
            #4) Print leaf and non-leaf (parent) nodes seperately
            elif menu_choice == 4:
                if tree.height != -1:
                    #uses the AVL Tree class methods find_leafs() and find_parents()
                    leafs = tree.find_leafs()
                    parents = tree.find_parents()                    
                    print("Leaf nodes for AVL Tree:")
                    print(leafs)                    
                    print("Non-Leaf nodes for AVL Tree:")
                    print(parents)
                else:
                    print("AVL Tree is empty.")
            #5) Calls display()
            elif menu_choice == 5:
                print("")
                print("AVL Tree (", tree.count_nodes(), " nodes)", sep='')
                tree.display()
            elif menu_choice == 6:
                break
                    

def Get_Manual_Input():
    arr = []
    print("Enter an integer, or x to stop")
    usr_in = input("")
    while usr_in != "x":
        try:
            val = int(usr_in)
            arr.append(val)
        except:
            print("Invalid input.")
        print("Enter another integer, or x to stop")
        usr_in = input("")
    return arr
            

#input validation method
def Get_User_Choice(max_opts):
    is_int = False
    while is_int == False:
        try:
            user_choice = int(input(""))
            if user_choice > max_opts:                
                print("Please enter a valid menu item.")
            else:
                is_int = True
        except:
            print("Please enter a valid menu item.")
    return user_choice

#input validation for tree insertion
def Get_User_Int():    
    is_int = False
    while is_int == False:
        print("Please enter an integer.")
        try:
            user_choice = int(input(""))
            is_int = True
        except:
            print("Incorrect Entry.")
    return user_choice

''' not using this at the moment
#generate a set (unique vals) of random numbers
def Generate_Set(n):
    arr = []
    valid = False
    for count in range(n):
        num = ran.randint(1, n*5 + 1)
        #if the num generated is in the array, generate another
        while num in arr:
            num = ran.randint(1, n*5 + 1)
        arr.append(num)
    return arr
'''

#control the menu choices depending on if the Tree has any nodes
def Tree_Menu():
    items = [
        "1) Insert a new integer key into the AVL Tree.",
        "2) Delete an integer key from the AVL Tree.",
        "3) Print the in-order traversal sequence of the AVL Tree.",
        "4) Print all leaf nodes and non-leaf nodes of the AVL Tree seperately.",
        "5) Display the AVL tree, showing the height and balance factor.",
        "6) Exit."
        ]
    for item in items:
        print(item)

def main():
    menu()

main()
